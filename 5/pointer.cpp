#include <iostream>

using namespace std;

int main()
{
	int  myAge;     //переменна€
	int * pAge=0;   //указатель

	cout << "Enter your Age:\n";
	cin >> myAge;
	cout << "\nSET: pAge = &myAge\n\n"; // записали в адрес на этом этапе
	pAge = &myAge;  // в указатель pAge положить адрес myAge
	
	cout << "myAge = " << myAge << endl;   //начальное значение
	cout << "*pAge = " << *pAge << endl; //начальное значение через укзатель

	cout << "Enter *pAge:\n";
	cin >> *pAge;

	cout << "myAge = " << myAge << endl;   //новое значение
	cout << "*pAge = " << *pAge << endl; //новое значение через укзатель

	cout << "Change your age:\n";
	cin >> myAge;
	
	cout << "myAge = " << myAge << endl;   //новое значение
	cout << "*pAge = " << *pAge << endl;   //новое значение через укзатель
	
	cout << "Addres of myAge and pAge:\n";
	cout << "&myAge = " << &myAge << "\tpAge = " << pAge << "\n\n"; //увидели, что работа происходила с одним и тем же адресом

	return 0;
}
// ѕеременна€ myAge типа int и переменна€-указатель pAge на  int Ц это две стороны одной и той же переменной. ѕеременна€ myAge представл€ет прежде всего значение, а операци€ Ђ&ї используетс€ дл€ получени€ адреса этой переменной. ѕеременна€ pAge Ц представл€ет прежде всего адрес, а операци€ Ђ*ї служит дл€ получени€ значени€ по этому адресу. ѕоэтому *pAge и  myAge синонимы и выражение *pAge можно использовать точно также как и переменную типа int.
// ѕеременна€-указатель никогда не бывает просто указателем. ќна всегда указывает на определенный тип данных. “ип указател€ сообщает компил€тору сколько пам€ти необходимо дл€ объекта, адрес которого указатель содержит. Ќапример, адрес переменной типа int выгл€дит также как и адрес переменной типа double, но дл€ типов int и double требуетс€ различное количество байтов и различные внутренние форматы дл€ хранени€ значений. —ами переменные-указатели имеют одинаковый размер (обычно 4 байта).
